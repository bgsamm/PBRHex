// Auto-generated by commands.py
using System.CommandLine;

namespace PBRHex.CLI
{
    internal partial class CommandParser
    {
        private readonly Dictionary<string, Command> Commands = new();

        private void InitCommands() {
            Commands.Add("commands", CreateCommandsCommand());
            Commands.Add("exit", CreateExitCommand());
            Commands.Add("help", CreateHelpCommand());
            Commands.Add("init-project", CreateInitProjectCommand());
            Commands.Add("list-projects", CreateListProjectsCommand());
        }

        private Command CreateCommandsCommand() {
            Command command = new("commands", "Displays a list of available commands.");

            command.SetHandler(CommandsHandle);

            return command;
        }

        private Command CreateExitCommand() {
            Command command = new("exit", "Exits the program.");
            command.AddAlias("quit");

            command.SetHandler(ExitHandle);

            return command;
        }

        private Command CreateHelpCommand() {
            Command command = new("help", "Displays command help information.");

            Argument<string> commandArgument = new("command", "The command to display help information for");

            command.Add(commandArgument);
            command.SetHandler(HelpHandle, commandArgument);

            return command;
        }

        private Command CreateInitProjectCommand() {
            Command command = new("init-project", "Creates a new project.");

            Argument<string> nameArgument = new("name", "The name of the project");
            Argument<string> pathArgument = new("path", "The directory in which to create the project");
            pathArgument.SetDefaultValue(".");

            command.Add(nameArgument);
            command.Add(pathArgument);
            command.SetHandler(InitProjectHandle, nameArgument, pathArgument);

            return command;
        }

        private Command CreateListProjectsCommand() {
            Command command = new("list-projects", "Lists known projects.");

            command.SetHandler(ListProjectsHandle);

            return command;
        }

        private partial void CommandsHandle();
        private partial void ExitHandle();
        private partial void HelpHandle(string command);
        private partial void InitProjectHandle(string name, string path);
        private partial void ListProjectsHandle();
    }
}
